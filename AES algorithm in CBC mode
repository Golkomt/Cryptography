#include <iostream>
#include <openssl/aes.h>
#include <openssl/rand.h>

// AES encryption function
void aes_encrypt(const unsigned char *plaintext, int plaintext_len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext) {
    AES_KEY aes_key;
    AES_set_encrypt_key(key, 128, &aes_key);
    AES_cbc_encrypt(plaintext, ciphertext, plaintext_len, &aes_key, iv, AES_ENCRYPT);
}

// AES decryption function
void aes_decrypt(const unsigned char *ciphertext, int ciphertext_len, unsigned char *key, unsigned char *iv, unsigned char *decryptedtext) {
    AES_KEY aes_key;
    AES_set_decrypt_key(key, 128, &aes_key);
    AES_cbc_encrypt(ciphertext, decryptedtext, ciphertext_len, &aes_key, iv, AES_DECRYPT);
}

int main() {
    unsigned char key[AES_BLOCK_SIZE]; // AES key
    unsigned char iv[AES_BLOCK_SIZE];  // Initialization vector
    unsigned char plaintext[] = "Hello, OpenSSL!"; // Plaintext to be encrypted

    // Generate a random key and IV
    RAND_bytes(key, AES_BLOCK_SIZE);
    RAND_bytes(iv, AES_BLOCK_SIZE);

    // Determine the length of the plaintext and allocate space for ciphertext
    int plaintext_len = strlen((char *)plaintext);
    int ciphertext_len = ((plaintext_len + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE;
    unsigned char ciphertext[ciphertext_len];

    // Encrypt the plaintext
    aes_encrypt(plaintext, plaintext_len, key, iv, ciphertext);

    std::cout << "Ciphertext: ";
    for (int i = 0; i < ciphertext_len; ++i) {
        printf("%02x", ciphertext[i]);
    }
    std::cout << std::endl;

    // Decrypt the ciphertext
    unsigned char decryptedtext[ciphertext_len];
    aes_decrypt(ciphertext, ciphertext_len, key, iv, decryptedtext);

    std::cout << "Decrypted text: " << decryptedtext << std::endl;

    return 0;
}
